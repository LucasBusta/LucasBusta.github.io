hemp$samples$rt_offset[hemp$samples$Sample_ID == "25"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "45"] <- -11
hemp$samples$rt_offset[hemp$samples$Sample_ID == "46"] <- -2
hemp$samples$baseline_window <- 20
# standard <- data.frame(
#     Sample_ID = "0",
#     extraction_time = NA,
#     plant_age = 0,
#     relative_area = 0,
#     rt_offset = 0,
#     baseline_window = 20,
#     path_to_cdf_csv = "/Volumes/Luke_Lab_1/hemp/raw_data/GCMS_data/calibration_curve/10_10_1.CDF.csv"
# )
# hemp$samples <- rbind(hemp$samples, standard)
# hemp$samples$path_to_cdf_csv <- NA
# hemp$samples$path_to_cdf_csv <- paste0(paths_to_cdfs[match(hemp$samples$plant_name, gsub(".CDF", "", gsub(".*GCMS_data/", "", paths_to_cdfs)))], ".csv")
writeMonolist(monolist = hemp$samples, monolist_out_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"))
## Examine monolist completeness
# check <- dplyr::filter(hemp$samples, sex == "female", sample_type == "main_sample")
# check <- check[-grep("dead", check$comments),]
# writeMonolist(monolist = check, monolist_out_path = "/Volumes/Luke_Lab_1/hemp/monolists/check.csv")
## Run integration app
integrationApp( ## ready to roll
chromatograms = read.table(file = paste0(main_path, "raw_data/GCMS_data/round_2/chromatograms.csv"), sep = ",", header = TRUE),
# x_axis_start = 410, x_axis_end = 440, # peak 1
# x_axis_start = 510, x_axis_end = 540, # peak 2
# x_axis_start = 550, x_axis_end = 600, # peak 3 / 4
# x_axis_start = 600, x_axis_end = 625, # peak 5
# x_axis_start = 625, x_axis_end = 670, # peak 6
# x_axis_start = 700, x_axis_end = 740, # peak 7
x_axis_start = 400, x_axis_end = 650, # all
samples_monolist_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"),
create_new_samples_monolist = TRUE,
samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv")), # all
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[102:103], # two standards
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[95:103], # all standards
# samples_monolist_subset =
#     c(which(hemp$samples$path_to_cdf_csv %in% paste0(main_path, "raw_data/GCMS_data/",
#     c("greeley-2-5", "greeley-2-7", "keith-1-3", "dakota-2-1", "kearney-2-3", "merick-2-1", "merick-2-4", "keith-2-1", "douglas-1-5"),
#     ".CDF.csv"))
# ),
peaks_monolist_path = paste0(main_path, "monolists/peak_list_round_2.csv"),
create_new_peak_monolist = TRUE,
zoom_and_scroll_rate = 30
)
hemp$samples$Sample_ID == "10_10_1"
hemp$samples$rt_offset
hemp$samples <- readMonolist(monolist_in_path = "/Volumes/Luke_Lab_1/hemp/monolists/GCMS_samples_round_2.csv")
hemp$samples$rt_offset <- 0
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_1"]
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_1"] <- -40
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_1"]
writeMonolist(monolist = hemp$samples, monolist_out_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"))
paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv")
integrationApp( ## ready to roll
chromatograms = read.table(file = paste0(main_path, "raw_data/GCMS_data/round_2/chromatograms.csv"), sep = ",", header = TRUE),
# x_axis_start = 410, x_axis_end = 440, # peak 1
# x_axis_start = 510, x_axis_end = 540, # peak 2
# x_axis_start = 550, x_axis_end = 600, # peak 3 / 4
# x_axis_start = 600, x_axis_end = 625, # peak 5
# x_axis_start = 625, x_axis_end = 670, # peak 6
# x_axis_start = 700, x_axis_end = 740, # peak 7
x_axis_start = 400, x_axis_end = 650, # all
samples_monolist_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"),
create_new_samples_monolist = TRUE,
samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv")), # all
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[102:103], # two standards
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[95:103], # all standards
# samples_monolist_subset =
#     c(which(hemp$samples$path_to_cdf_csv %in% paste0(main_path, "raw_data/GCMS_data/",
#     c("greeley-2-5", "greeley-2-7", "keith-1-3", "dakota-2-1", "kearney-2-3", "merick-2-1", "merick-2-4", "keith-2-1", "douglas-1-5"),
#     ".CDF.csv"))
# ),
peaks_monolist_path = paste0(main_path, "monolists/peak_list_round_2.csv"),
create_new_peak_monolist = TRUE,
zoom_and_scroll_rate = 30
)
hemp$samples <- readMonolist(monolist_in_path = "/Volumes/Luke_Lab_1/hemp/monolists/GCMS_samples_round_2.csv")
hemp$samples$rt_offset <- 0
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_1"] <- -40
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_2"] <- -20
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_3"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_1"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_2"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_3"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_1"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_2"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_3"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "1"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "2"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "4"] <- -1
hemp$samples$rt_offset[hemp$samples$Sample_ID == "14"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "22"] <- -15
hemp$samples$rt_offset[hemp$samples$Sample_ID == "23"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "24"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "25"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "45"] <- -11
hemp$samples$rt_offset[hemp$samples$Sample_ID == "46"] <- -2
hemp$samples$baseline_window <- 20
# standard <- data.frame(
#     Sample_ID = "0",
#     extraction_time = NA,
#     plant_age = 0,
#     relative_area = 0,
#     rt_offset = 0,
#     baseline_window = 20,
#     path_to_cdf_csv = "/Volumes/Luke_Lab_1/hemp/raw_data/GCMS_data/calibration_curve/10_10_1.CDF.csv"
# )
# hemp$samples <- rbind(hemp$samples, standard)
# hemp$samples$path_to_cdf_csv <- NA
# hemp$samples$path_to_cdf_csv <- paste0(paths_to_cdfs[match(hemp$samples$plant_name, gsub(".CDF", "", gsub(".*GCMS_data/", "", paths_to_cdfs)))], ".csv")
writeMonolist(monolist = hemp$samples, monolist_out_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"))
integrationApp( ## ready to roll
chromatograms = read.table(file = paste0(main_path, "raw_data/GCMS_data/round_2/chromatograms.csv"), sep = ",", header = TRUE),
# x_axis_start = 410, x_axis_end = 440, # peak 1
# x_axis_start = 510, x_axis_end = 540, # peak 2
# x_axis_start = 550, x_axis_end = 600, # peak 3 / 4
# x_axis_start = 600, x_axis_end = 625, # peak 5
# x_axis_start = 625, x_axis_end = 670, # peak 6
# x_axis_start = 700, x_axis_end = 740, # peak 7
x_axis_start = 400, x_axis_end = 650, # all
samples_monolist_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"),
create_new_samples_monolist = FALSE,
samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv")), # all
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[102:103], # two standards
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[95:103], # all standards
# samples_monolist_subset =
#     c(which(hemp$samples$path_to_cdf_csv %in% paste0(main_path, "raw_data/GCMS_data/",
#     c("greeley-2-5", "greeley-2-7", "keith-1-3", "dakota-2-1", "kearney-2-3", "merick-2-1", "merick-2-4", "keith-2-1", "douglas-1-5"),
#     ".CDF.csv"))
# ),
peaks_monolist_path = paste0(main_path, "monolists/peak_list_round_2.csv"),
create_new_peak_monolist = TRUE,
zoom_and_scroll_rate = 30
)
hemp$samples <- readMonolist(monolist_in_path = "/Volumes/Luke_Lab_1/hemp/monolists/GCMS_samples_round_2.csv")
hemp$samples$rt_offset <- 0
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_1"] <- -12
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_2"] <- -12
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_3"] <- -8
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_1"] <- -8
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_2"] <- -8
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_3"] <- -8
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_1"] <- -8
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_2"] <- -8
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_3"] <- -8
hemp$samples$rt_offset[hemp$samples$Sample_ID == "1"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "2"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "4"] <- -1
hemp$samples$rt_offset[hemp$samples$Sample_ID == "14"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "22"] <- -15
hemp$samples$rt_offset[hemp$samples$Sample_ID == "23"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "24"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "25"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "45"] <- -11
hemp$samples$rt_offset[hemp$samples$Sample_ID == "46"] <- -2
hemp$samples$baseline_window <- 20
# standard <- data.frame(
#     Sample_ID = "0",
#     extraction_time = NA,
#     plant_age = 0,
#     relative_area = 0,
#     rt_offset = 0,
#     baseline_window = 20,
#     path_to_cdf_csv = "/Volumes/Luke_Lab_1/hemp/raw_data/GCMS_data/calibration_curve/10_10_1.CDF.csv"
# )
# hemp$samples <- rbind(hemp$samples, standard)
# hemp$samples$path_to_cdf_csv <- NA
# hemp$samples$path_to_cdf_csv <- paste0(paths_to_cdfs[match(hemp$samples$plant_name, gsub(".CDF", "", gsub(".*GCMS_data/", "", paths_to_cdfs)))], ".csv")
writeMonolist(monolist = hemp$samples, monolist_out_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"))
## Examine monolist completeness
# check <- dplyr::filter(hemp$samples, sex == "female", sample_type == "main_sample")
# check <- check[-grep("dead", check$comments),]
# writeMonolist(monolist = check, monolist_out_path = "/Volumes/Luke_Lab_1/hemp/monolists/check.csv")
## Run integration app
integrationApp( ## ready to roll
chromatograms = read.table(file = paste0(main_path, "raw_data/GCMS_data/round_2/chromatograms.csv"), sep = ",", header = TRUE),
# x_axis_start = 410, x_axis_end = 440, # peak 1
# x_axis_start = 510, x_axis_end = 540, # peak 2
# x_axis_start = 550, x_axis_end = 600, # peak 3 / 4
# x_axis_start = 600, x_axis_end = 625, # peak 5
# x_axis_start = 625, x_axis_end = 670, # peak 6
# x_axis_start = 700, x_axis_end = 740, # peak 7
x_axis_start = 400, x_axis_end = 650, # all
samples_monolist_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"),
create_new_samples_monolist = FALSE,
samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv")), # all
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[102:103], # two standards
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[95:103], # all standards
# samples_monolist_subset =
#     c(which(hemp$samples$path_to_cdf_csv %in% paste0(main_path, "raw_data/GCMS_data/",
#     c("greeley-2-5", "greeley-2-7", "keith-1-3", "dakota-2-1", "kearney-2-3", "merick-2-1", "merick-2-4", "keith-2-1", "douglas-1-5"),
#     ".CDF.csv"))
# ),
peaks_monolist_path = paste0(main_path, "monolists/peak_list_round_2.csv"),
create_new_peak_monolist = TRUE,
zoom_and_scroll_rate = 30
)
hemp$samples <- readMonolist(monolist_in_path = "/Volumes/Luke_Lab_1/hemp/monolists/GCMS_samples_round_2.csv")
hemp$samples$rt_offset <- 0
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_1"] <- -16
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_2"] <- -16
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_3"] <- -6
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_1"] <- -6
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_2"] <- -6
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_3"] <- -6
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_1"] <- -6
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_2"] <- -6
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_3"] <- -6
hemp$samples$rt_offset[hemp$samples$Sample_ID == "1"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "2"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "4"] <- -1
hemp$samples$rt_offset[hemp$samples$Sample_ID == "14"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "22"] <- -15
hemp$samples$rt_offset[hemp$samples$Sample_ID == "23"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "24"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "25"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "45"] <- -11
hemp$samples$rt_offset[hemp$samples$Sample_ID == "46"] <- -2
hemp$samples$baseline_window <- 20
# standard <- data.frame(
#     Sample_ID = "0",
#     extraction_time = NA,
#     plant_age = 0,
#     relative_area = 0,
#     rt_offset = 0,
#     baseline_window = 20,
#     path_to_cdf_csv = "/Volumes/Luke_Lab_1/hemp/raw_data/GCMS_data/calibration_curve/10_10_1.CDF.csv"
# )
# hemp$samples <- rbind(hemp$samples, standard)
# hemp$samples$path_to_cdf_csv <- NA
# hemp$samples$path_to_cdf_csv <- paste0(paths_to_cdfs[match(hemp$samples$plant_name, gsub(".CDF", "", gsub(".*GCMS_data/", "", paths_to_cdfs)))], ".csv")
writeMonolist(monolist = hemp$samples, monolist_out_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"))
## Examine monolist completeness
# check <- dplyr::filter(hemp$samples, sex == "female", sample_type == "main_sample")
# check <- check[-grep("dead", check$comments),]
# writeMonolist(monolist = check, monolist_out_path = "/Volumes/Luke_Lab_1/hemp/monolists/check.csv")
## Run integration app
integrationApp( ## ready to roll
chromatograms = read.table(file = paste0(main_path, "raw_data/GCMS_data/round_2/chromatograms.csv"), sep = ",", header = TRUE),
# x_axis_start = 410, x_axis_end = 440, # peak 1
# x_axis_start = 510, x_axis_end = 540, # peak 2
# x_axis_start = 550, x_axis_end = 600, # peak 3 / 4
# x_axis_start = 600, x_axis_end = 625, # peak 5
# x_axis_start = 625, x_axis_end = 670, # peak 6
# x_axis_start = 700, x_axis_end = 740, # peak 7
x_axis_start = 400, x_axis_end = 650, # all
samples_monolist_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"),
create_new_samples_monolist = FALSE,
samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv")), # all
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[102:103], # two standards
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[95:103], # all standards
# samples_monolist_subset =
#     c(which(hemp$samples$path_to_cdf_csv %in% paste0(main_path, "raw_data/GCMS_data/",
#     c("greeley-2-5", "greeley-2-7", "keith-1-3", "dakota-2-1", "kearney-2-3", "merick-2-1", "merick-2-4", "keith-2-1", "douglas-1-5"),
#     ".CDF.csv"))
# ),
peaks_monolist_path = paste0(main_path, "monolists/peak_list_round_2.csv"),
create_new_peak_monolist = TRUE,
zoom_and_scroll_rate = 30
)
hemp$samples <- readMonolist(monolist_in_path = "/Volumes/Luke_Lab_1/hemp/monolists/GCMS_samples_round_2.csv")
hemp$samples$rt_offset <- 0
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_1"] <- -16
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_2"] <- -17
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_10_3"] <- -5
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_1"] <- -5
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_2"] <- -5
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_20_3"] <- -5
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_1"] <- -5
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_2"] <- -5
hemp$samples$rt_offset[hemp$samples$Sample_ID == "10_30_3"] <- -5
hemp$samples$rt_offset[hemp$samples$Sample_ID == "1"] <- -10
hemp$samples$rt_offset[hemp$samples$Sample_ID == "2"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "4"] <- -1
hemp$samples$rt_offset[hemp$samples$Sample_ID == "14"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "22"] <- -15
hemp$samples$rt_offset[hemp$samples$Sample_ID == "23"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "24"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "25"] <- -2
hemp$samples$rt_offset[hemp$samples$Sample_ID == "45"] <- -11
hemp$samples$rt_offset[hemp$samples$Sample_ID == "46"] <- -2
hemp$samples$baseline_window <- 20
# standard <- data.frame(
#     Sample_ID = "0",
#     extraction_time = NA,
#     plant_age = 0,
#     relative_area = 0,
#     rt_offset = 0,
#     baseline_window = 20,
#     path_to_cdf_csv = "/Volumes/Luke_Lab_1/hemp/raw_data/GCMS_data/calibration_curve/10_10_1.CDF.csv"
# )
# hemp$samples <- rbind(hemp$samples, standard)
# hemp$samples$path_to_cdf_csv <- NA
# hemp$samples$path_to_cdf_csv <- paste0(paths_to_cdfs[match(hemp$samples$plant_name, gsub(".CDF", "", gsub(".*GCMS_data/", "", paths_to_cdfs)))], ".csv")
writeMonolist(monolist = hemp$samples, monolist_out_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"))
## Examine monolist completeness
# check <- dplyr::filter(hemp$samples, sex == "female", sample_type == "main_sample")
# check <- check[-grep("dead", check$comments),]
# writeMonolist(monolist = check, monolist_out_path = "/Volumes/Luke_Lab_1/hemp/monolists/check.csv")
## Run integration app
integrationApp( ## ready to roll
chromatograms = read.table(file = paste0(main_path, "raw_data/GCMS_data/round_2/chromatograms.csv"), sep = ",", header = TRUE),
# x_axis_start = 410, x_axis_end = 440, # peak 1
# x_axis_start = 510, x_axis_end = 540, # peak 2
# x_axis_start = 550, x_axis_end = 600, # peak 3 / 4
# x_axis_start = 600, x_axis_end = 625, # peak 5
# x_axis_start = 625, x_axis_end = 670, # peak 6
# x_axis_start = 700, x_axis_end = 740, # peak 7
x_axis_start = 400, x_axis_end = 740, # all
samples_monolist_path = paste0(main_path, "monolists/GCMS_samples_round_2_updated.csv"),
create_new_samples_monolist = FALSE,
samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv")), # all
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[102:103], # two standards
# samples_monolist_subset = c(which(hemp$samples$path_to_cdf_csv != "NA.csv"))[95:103], # all standards
# samples_monolist_subset =
#     c(which(hemp$samples$path_to_cdf_csv %in% paste0(main_path, "raw_data/GCMS_data/",
#     c("greeley-2-5", "greeley-2-7", "keith-1-3", "dakota-2-1", "kearney-2-3", "merick-2-1", "merick-2-4", "keith-2-1", "douglas-1-5"),
#     ".CDF.csv"))
# ),
peaks_monolist_path = paste0(main_path, "monolists/peak_list_round_2.csv"),
create_new_peak_monolist = TRUE,
zoom_and_scroll_rate = 30
)
devtools::install_github("LucasBusta/phylochemistry", quiet = FALSE, force = TRUE)
packages <- c("phylochemistry")
lapply(packages, require, character.only = TRUE)
help(package = "phylochemistry")
devtools::install_github("LucasBusta/phylochemistry", quiet = FALSE, force = TRUE)
packages <- c("phylochemistry")
lapply(packages, require, character.only = TRUE)
help(package = "phylochemistry")
library(phylochemistry)
phylochemistry_example_dir <- "/Users/lucasbusta/Desktop/phylochemistry_example_data/"
phylochemistry_example_dir
dir(phylochemistry_example_dir)
dir(paste0(phylochemistry_example_dir, "monolists/"))
my_analysis <- list()
my_analysis$GCMS_samples <- readMonolist(monolist_in_path = paste0(phylochemistry_example_dir, "monolists/GCMS_samples.csv"))
str(my_analysis)
knitr::include_graphics('http://lucasbusta.github.io/phylochemistry/figures/in_that_case.png', dpi = NA)
devtools::install_github("LucasBusta/phylochemistry", quiet = FALSE, force = TRUE)
packages <- c("phylochemistry")
lapply(packages, require, character.only = TRUE)
help(package = "phylochemistry")
library(phylochemistry)
phylochemistry_example_dir <- "/Users/lucasbusta/Desktop/phylochemistry_example_data/"
phylochemistry_example_dir
dir(phylochemistry_example_dir)
dir(paste0(phylochemistry_example_dir, "monolists/"))
my_analysis <- list()
my_analysis$GCMS_samples <- readMonolist(monolist_in_path = paste0(phylochemistry_example_dir, "monolists/GCMS_samples.csv"))
str(my_analysis)
knitr::include_graphics('http://lucasbusta.github.io/phylochemistry/figures/in_that_case.png', dpi = NA)
devtools::install_github("LucasBusta/phylochemistry", quiet = FALSE, force = TRUE)
packages <- c("phylochemistry")
lapply(packages, require, character.only = TRUE)
help(package = "phylochemistry")
library(phylochemistry)
phylochemistry_example_dir <- "/Users/lucasbusta/Desktop/phylochemistry_example_data/"
phylochemistry_example_dir
dir(phylochemistry_example_dir)
dir(paste0(phylochemistry_example_dir, "monolists/"))
my_analysis <- list()
my_analysis$GCMS_samples <- readMonolist(monolist_in_path = paste0(phylochemistry_example_dir, "monolists/GCMS_samples.csv"))
str(my_analysis)
knitr::include_graphics('http://lucasbusta.github.io/phylochemistry/figures/in_that_case.png', dpi = NA)
```{r}
```
knitr::opts_chunk$set(echo = TRUE, prompt = FALSE, eval = TRUE,
warning = FALSE, comment="##", cache = TRUE,
fig.width = 6, fig.height = 4, #results = "hide",
collapse=TRUE, results='markup', max.print=6)
options(pillar.sigfig = 3)
asdf
hi
knitr::opts_chunk$set(echo = TRUE, prompt = FALSE, eval = TRUE,
warning = FALSE, comment="##", cache = TRUE,
fig.width = 6, fig.height = 4, #results = "hide",
collapse=TRUE, results='markup', max.print=6)
options(pillar.sigfig = 3)
knitr::include_graphics('http://lucasbusta.github.io/phylochemistry/figures/phylochemistry_logo.jpg', dpi = NA)
knitr::opts_chunk$set(echo = TRUE, prompt = FALSE, eval = TRUE,
warning = FALSE, comment="##", cache = TRUE,
fig.width = 6, fig.height = 4, #results = "hide",
collapse=TRUE, results='markup', max.print=6)
options(pillar.sigfig = 3)
knitr::include_graphics('http://lucasbusta.github.io/phylochemistry/figures/phylochemistry_logo.jpg', dpi = NA)
devtools::install_github("LucasBusta/phylochemistry", quiet = FALSE, force = TRUE)
packages <- c("phylochemistry")
lapply(packages, require, character.only = TRUE)
help(package = "phylochemistry")
knitr::opts_chunk$set(echo = TRUE, prompt = FALSE, eval = TRUE,
warning = FALSE, comment="##", cache = TRUE,
fig.width = 6, fig.height = 4, #results = "hide",
collapse=TRUE, results='markup', max.print=6)
options(pillar.sigfig = 3)
knitr::include_graphics('http://lucasbusta.github.io/phylochemistry/figures/phylochemistry_logo.jpg', dpi = NA)
devtools::install_github("LucasBusta/phylochemistry", quiet = FALSE, force = TRUE)
packages <- c("phylochemistry")
lapply(packages, require, character.only = TRUE)
help(package = "phylochemistry")
pressure
plot(pressure)
Formaldehyde
Indometh
plot(Indometh)
plot(Theoph)
Formaldehyde
plot(Formaldehyde)
plot(Theoph)
plot(Indometh)
pressure
plot(pressure)
plot(Indometh)
Indometh
Indometh
?Indometh
?mtcars
?Indometh
Indometh
head(Indometh)
plot(Indometh)
knitr::opts_chunk$set(echo = TRUE, prompt = FALSE, eval = TRUE,
warning = FALSE, comment="##", cache = TRUE,
fig.width = 6, fig.height = 4, #results = "hide",
collapse=TRUE, results='markup', max.print=6)
options(pillar.sigfig = 3)
knitr::include_graphics('http://lucasbusta.github.io/phylochemistry/figures/phylochemistry_logo.jpg', dpi = NA)
knitr::include_graphics('http://lucasbusta.github.io/phylochemistry/figures/rstudio_components.png', dpi = NA)
head(Indometh)
plot(Indometh)
devtools::install_github("LucasBusta/phylochemistry", quiet = FALSE, force = TRUE)
packages <- c("phylochemistry")
lapply(packages, require, character.only = TRUE)
help(package = "phylochemistry")
knitr::opts_chunk$set(echo = TRUE, prompt = FALSE, eval = TRUE,
warning = FALSE, comment="##", cache = TRUE,
fig.width = 6, fig.height = 4, #results = "hide",
collapse=TRUE, results='markup', max.print=6)
options(pillar.sigfig = 3)
knitr::include_graphics('http://lucasbusta.github.io/phylochemistry/figures/phylochemistry_logo.jpg', dpi = NA)
knitr::include_graphics('http://lucasbusta.github.io/phylochemistry/figures/rstudio_components.png', dpi = NA)
head(Indometh)
plot(Indometh)
devtools::install_github("LucasBusta/phylochemistry", quiet = FALSE, force = TRUE)
packages <- c("phylochemistry")
lapply(packages, require, character.only = TRUE)
help(package = "phylochemistry")
knitr::opts_chunk$set(echo = TRUE, prompt = FALSE, eval = TRUE,
warning = FALSE, comment="##", cache = TRUE,
fig.width = 6, fig.height = 4, #results = "hide",
collapse=TRUE, results='markup', max.print=6)
options(pillar.sigfig = 3)
knitr::include_graphics('http://thebustalab.github.io/phylochemistry/figures/phylochemistry_logo.jpg', dpi = NA)
knitr::include_graphics('http://thebustalab.github.io/phylochemistry/figures/rstudio_components.png', dpi = NA)
head(Indometh)
plot(Indometh)
devtools::install_github("LucasBusta/phylochemistry", quiet = FALSE, force = TRUE)
packages <- c("phylochemistry")
lapply(packages, require, character.only = TRUE)
help(package = "phylochemistry")
install.packages("tidyverse")
detach("package:ape", unload = TRUE)
detach("package:base", unload = TRUE)
detach("package:Biostrings", unload = TRUE)
detach("package:BiocGenerics", unload = TRUE)
detach("package:datasets", unload = TRUE)
detach("package:dplyr", unload = TRUE)
detach("package:DT", unload = TRUE)
detach("package:extrafont", unload = TRUE)
detach("package:factoextra", unload = TRUE)
detach("package:FactoMineR", unload = TRUE)
detach("package:forcats", unload = TRUE)
detach("package:ggmap", unload = TRUE)
detach("package:ggnewscale", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:IRanges", unload = TRUE)
detach("package:lattice", unload = TRUE)
detach("package:latticeExtra", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:msa", unload = TRUE)
detach("package:parallel", unload = TRUE)
detach("package:phylochemistry", unload = TRUE)
detach("package:phytools", unload = TRUE)
detach("package:plyr", unload = TRUE)
detach("package:purrr", unload = TRUE)
detach("package:raster", unload = TRUE)
detach("package:rasterVis", unload = TRUE)
detach("package:RColorBrewer", unload = TRUE)
detach("package:readr", unload = TRUE)
detach("package:rgdal", unload = TRUE)
detach("package:rgeos", unload = TRUE)
detach("package:S4Vectors", unload = TRUE)
detach("package:scales", unload = TRUE)
detach("package:shiny", unload = TRUE)
detach("package:sp", unload = TRUE)
detach("package:stats4", unload = TRUE)
detach("package:stats", unload = TRUE)
detach("package:stringr", unload = TRUE)
detach("package:tibble", unload = TRUE)
detach("package:tidyr", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
detach("package:utils", unload = TRUE)
detach("package:XVector", unload = TRUE)
install.packages("tidyverse")
detach("package:maps", unload = TRUE)
detach("package:mapdata", unload = TRUE)
detach("package:ggtree", unload = TRUE)
install.packages("tidyverse")
